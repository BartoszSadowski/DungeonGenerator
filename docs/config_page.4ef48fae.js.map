{"version":3,"sources":["../utils/dimensions.ts","../utils/dictionary.ts","../app/config.ts","../utils/calculate.ts","../app/sprite.ts","../utils/point.ts","../utils/spriteLocations.ts","../app/spriteMap.ts","../data/configData.ts","../config_page.ts"],"names":[],"mappings":"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","file":"config_page.4ef48fae.js","sourceRoot":"..\\src\\pages","sourcesContent":["export default class Dimensions {\n    width: number;\n    height: number;\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n}\n","export const AXIS: Record<string, string> = {\n    VERTICAL: 'VERTICAL',\n    HORIZONTAL: 'HORIZONTAL',\n    UNDEFINED: 'UNDEFINED'\n};\n\nexport enum Directions {\n    Up = 'UP',\n    Down = 'DOWN',\n    Left = 'LEFT',\n    Right = 'RIGHT',\n    Default = 'UP',\n    Center = 'CENTER',\n    Floor = 'FLOOR'\n}\n\nexport const SPRITE_TYPES: Record<string, string> = {\n    BASE: 'BASE',\n    WALL: 'WALL',\n    DOOR: 'DOOR',\n    ENTERANCE: 'ENTERANCE',\n    EXIT: 'EXIT',\n    EVENT_A: 'EVENT_A',\n    EVENT_B: 'EVENT_B',\n    EVENT_C: 'EVENT_C',\n    EVENT_D: 'EVENT_D',\n    EVENT_E: 'EVENT_E'\n};\n\nexport enum Items {\n    Empty = '',\n    Door = 'D',\n    Wall = 'W',\n    Floor = 'F',\n    Enterance = 'E',\n    Exit = 'X',\n    Event = 'e'\n}\n\nexport enum Modifiers {\n    None = '',\n    Variant = 'V'\n}\n\nexport enum RoomType {\n    Default = 'Default',\n    Dungeon = 'Dungeon',\n    Entrance = 'Entrance',\n    Exit = 'Exit',\n    Event = 'Event'\n}\n\nexport enum StorageItems {\n    Dungeon = 'Dungeon',\n    Config = 'Config'\n}\n\nexport enum EventTypes {\n    Default = 'Default',\n    Enemy = 'Enemy',\n    Item = 'Item'\n}\n","import Dimensions from '../utils/dimensions';\nimport Sprite from './sprite';\nimport {\n    StorageItems\n} from '../utils/dictionary';\n\nexport default class Config {\n    divisable: Dimensions;\n    minDimension: Dimensions;\n    scale: number;\n    ctx: CanvasRenderingContext2D;\n    spriteMap: Map<string, Sprite>\n    denseness: number\n    lootChance: number;\n    dangerChance: number;\n\n    // messages\n    SAVED: string = 'Config saved';\n    LOADED: string = 'Config loaded';\n\n    constructor(\n        divisable: Dimensions,\n        minDimension: Dimensions,\n        scale: number,\n        context: CanvasRenderingContext2D,\n        spriteMap: Map<string, Sprite>,\n        denseness: number,\n        lootChance: number,\n        dangerChance: number\n    ) {\n        this.divisable = divisable;\n        this.minDimension = minDimension;\n        this.scale = scale;\n        this.ctx = context;\n        this.spriteMap = spriteMap;\n        this.denseness = denseness;\n        this.lootChance = lootChance;\n        this.dangerChance = dangerChance;\n    }\n\n    save() {\n        sessionStorage.setItem(StorageItems.Config, JSON.stringify(this));\n\n        return this.SAVED;\n    }\n\n    load() {\n        const savedConfigStr: string = sessionStorage.getItem(StorageItems.Config);\n        const savedConfig: Config = JSON.parse(savedConfigStr);\n\n        this.scale = savedConfig.scale;\n        this.denseness = savedConfig.denseness;\n        this.divisable = new Dimensions(savedConfig.divisable.width, savedConfig.divisable.height);\n        this.minDimension = new Dimensions(savedConfig.minDimension.width, savedConfig.minDimension.height);\n        this.lootChance = savedConfig.lootChance;\n        this.dangerChance = savedConfig.dangerChance;\n\n        return this.LOADED;\n    }\n\n    init() {\n        if (!sessionStorage.getItem(StorageItems.Config)) {\n            return this.save();\n        }\n        return this.load();\n    }\n}\n","export function roundDown(number: number, rounder = 10): number {\n    return Math.floor(number / rounder) * rounder;\n}\n\nexport function degreeToRadians(degree: number): number {\n    return (degree * Math.PI) / 180;\n}\n","import Point from '../utils/point';\nimport Dimensions from '../utils/dimensions';\n\nimport { anyFunction } from '../types/functions';\nimport { Directions } from '../utils/dictionary';\nimport { degreeToRadians } from '../utils/calculate';\n\nexport default class Sprite {\n    static image: HTMLImageElement = new Image();\n    anchor: Point;\n    size: Dimensions;\n\n    constructor(anchor: Point, size: Dimensions) {\n        this.anchor = anchor;\n        this.size = size;\n    }\n\n    draw(ctx: CanvasRenderingContext2D, spot: Point, dimensions: Dimensions, direction?: Directions): Sprite {\n        let angle;\n        switch (direction) {\n        case Directions.Down:\n            angle = degreeToRadians(180);\n            break;\n        case Directions.Left:\n            angle = degreeToRadians(270);\n            break;\n        case Directions.Right:\n            angle = degreeToRadians(90);\n            break;\n        case Directions.Up:\n        default:\n            angle = degreeToRadians(0);\n            break;\n        }\n        if (angle === 0) {\n            ctx.drawImage(\n                Sprite.image,\n                this.anchor.x,\n                this.anchor.y,\n                this.size.width,\n                this.size.height,\n                spot.x,\n                spot.y,\n                dimensions.width,\n                dimensions.height\n            );\n        } else {\n            ctx.translate(\n                spot.x + (dimensions.width / 2),\n                spot.y + (dimensions.height / 2)\n            );\n            ctx.rotate(angle);\n            ctx.drawImage(\n                Sprite.image,\n                this.anchor.x,\n                this.anchor.y,\n                this.size.width,\n                this.size.height,\n                -dimensions.width / 2,\n                -dimensions.height / 2,\n                dimensions.width,\n                dimensions.height\n            );\n            ctx.rotate(-angle);\n            ctx.translate(\n                -(spot.x + (dimensions.width / 2)),\n                -(spot.y + (dimensions.height / 2))\n            );\n        }\n\n        return this;\n    }\n\n    static initialize(tileMap: string, callBack: anyFunction) {\n        this.image.addEventListener('load', callBack);\n        this.image.src = tileMap;\n    }\n}\n","import { Directions } from './dictionary';\n\nexport default class Point {\n    x: number;\n    y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    rescale(scale: number) {\n        return new Point(this.x * scale, this.y * scale);\n    }\n\n    move(x: number, y: number) {\n        return new Point(this.x + x, this.y + y);\n    }\n\n    isBetween(point1: Point, point2: Point): boolean {\n        const bigX = Math.max(point1.x, point2.x);\n        const smallX = Math.min(point1.x, point2.x);\n        const bigY = Math.max(point1.y, point2.y);\n        const smallY = Math.min(point1.y, point2.y);\n\n        return this.x <= bigX && this.x >= smallX && this.y <= bigY && this.y >= smallY;\n    }\n\n    isSame(point: Point): boolean {\n        return this.x === point.x && this.y === point.y;\n    }\n\n    getDirection(point: Point): Directions {\n        return ([\n            [this.isSame(point), Directions.Center],\n            [this.x > point.x, Directions.Left],\n            [this.x < point.x, Directions.Right],\n            [this.y > point.y, Directions.Up],\n            [this.y < point.y, Directions.Down],\n            [true, Directions.Default]\n        ] as Array<[boolean, Directions]>)\n            .find(con => con[0])[1];\n    }\n}\n","import Point from './point';\nimport { SPRITE_TYPES } from './dictionary';\n\nconst SPRITE_LOCATIONS: Record<string, Point> = {\n    [SPRITE_TYPES.BASE]: new Point(0, 0),\n    [SPRITE_TYPES.WALL]: new Point(16, 0),\n    [SPRITE_TYPES.DOOR]: new Point(32, 0),\n    [SPRITE_TYPES.ENTERANCE]: new Point(0, 16),\n    [SPRITE_TYPES.EXIT]: new Point(16, 16),\n    [SPRITE_TYPES.EVENT_A]: new Point(32, 16),\n    [SPRITE_TYPES.EVENT_B]: new Point(0, 32),\n    [SPRITE_TYPES.EVENT_C]: new Point(16, 32),\n    [SPRITE_TYPES.EVENT_D]: new Point(32, 32),\n    [SPRITE_TYPES.EVENT_E]: new Point(0, 48)\n};\n\nexport default SPRITE_LOCATIONS;\n","import Dimensions from '../utils/dimensions';\nimport Sprite from './sprite';\nimport {\n    SPRITE_TYPES\n} from '../utils/dictionary';\nimport SPRITE_LOCATIONS from '../utils/spriteLocations';\n\nconst spriteDimensions = new Dimensions(16, 16);\n\nfunction appendSprite(map: Map<string, Sprite>, name: string): void {\n    map.set(name, new Sprite(SPRITE_LOCATIONS[name], spriteDimensions));\n}\n\nexport default function createSpriteMap() {\n    const spriteMap: Map<string, Sprite> = new Map();\n\n    Object\n        .keys(SPRITE_TYPES)\n        .forEach(key => {\n            appendSprite(spriteMap, SPRITE_TYPES[key]);\n        });\n\n    return spriteMap;\n}\n","import Dimensions from '../utils/dimensions';\nimport createSpriteMap from '../app/spriteMap';\n\nexport const canvas = <HTMLCanvasElement> document.getElementById('demoCanvas');\nexport const ctx = <CanvasRenderingContext2D | null> (canvas ? canvas.getContext('2d') : null);\nexport const nameEl = <HTMLElement> document.getElementById('dungeon-name');\nexport const regenerateEl = <HTMLElement> document.getElementById('dungeon-regenerate');\nexport const printEl = <HTMLElement> document.getElementById('dungeon-print');\nexport const bodyEl = <HTMLElement> document.querySelector('body');\nexport const eventEl = <HTMLElement> document.getElementById('event-list');\n\nexport const SCALE = 35;\nexport const DENSENESS = 1;\n\nexport const spriteMap = createSpriteMap();\nexport const divisable = new Dimensions(16, 12);\nexport const minDimension = new Dimensions(6, 6);\n\nexport const lootChance = 50;\nexport const dangerChance = 50;\nexport const eventChance = lootChance + dangerChance / 2;\n","import Config from './app/config';\nimport {\n    ctx,\n    SCALE,\n    DENSENESS,\n    spriteMap,\n    divisable,\n    minDimension,\n    lootChance,\n    dangerChance\n} from './data/configData';\nimport Dimensions from './utils/dimensions';\n\nconst scaleEl = <HTMLInputElement> document.getElementById('scale');\nconst roomHeightEl = <HTMLInputElement> document.getElementById('room-height');\nconst roomWidthEl = <HTMLInputElement> document.getElementById('room-width');\nconst densenessEl = <HTMLInputElement> document.getElementById('denseness');\nconst dangerChanceEl = <HTMLInputElement> document.getElementById('danger');\nconst lootChanceEl = <HTMLInputElement> document.getElementById('loot');\n\nconst config = new Config(divisable, minDimension, SCALE, ctx, spriteMap, DENSENESS, lootChance, dangerChance);\nconfig.init();\n\nscaleEl.value = config.scale.toString();\nscaleEl.addEventListener('change', () => {\n    config.scale = +scaleEl.value;\n    config.save();\n});\n\nroomHeightEl.value = config.divisable.height.toString();\nroomHeightEl.addEventListener('change', () => {\n    config.divisable = new Dimensions(+roomWidthEl.value, +roomHeightEl.value);\n    config.save();\n});\n\nroomWidthEl.value = config.divisable.width.toString();\nroomWidthEl.addEventListener('change', () => {\n    config.divisable = new Dimensions(+roomWidthEl.value, +roomHeightEl.value);\n    config.save();\n});\n\ndensenessEl.value = config.denseness.toString();\ndensenessEl.addEventListener('change', () => {\n    config.denseness = +densenessEl.value;\n    config.save();\n});\n\ndangerChanceEl.value = config.dangerChance.toString();\ndangerChanceEl.addEventListener('change', () => {\n    config.dangerChance = +dangerChanceEl.value;\n    console.log(config);\n    config.save();\n});\n\nlootChanceEl.value = config.lootChance.toString();\nlootChanceEl.addEventListener('change', () => {\n    config.lootChance = +lootChanceEl.value;\n    console.log(config);\n    config.save();\n});\n"]}